<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="352" height="147" initialize="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import spark.components.CheckBox;
			import spark.components.RadioButton;
			
			import struct.MsgStruct;
			import struct.StructStruct;
			
			import templates.StructTemplate;
			
			private var config:XML;
//			private var platform_url:String="http://10.1.1.5/su/proto/download.php?project=ultraman_login";
			private var platform_url:String="C:/Users/Physwf/SkyDrive/文档/ultraman_login_proto.xml";
			private var outputDir:String = "F:/physwf-flash-lab/FbProj/PswGame/ProtocolGenerator/output/"
			private var structTemplate:String;
			private var msgTemplate:String;
			private var configFile:File;
			private var structTemplateFile:File;
			private var msgTemplateFile:File;
			private var msgManagerFile:File;
			private var msgManagerFs:FileStream;
			private var msgMngPath:String;
			private var serverType:String;
			
			private var so:SharedObject;
			
			private function init():void
			{
				so = SharedObject.getLocal("protocolGenerator/project");
				loadStructTemplate();
				loadMsgTemplate();
				readConfig();
			}
			
			private function readConfig():void
			{
				configFile = File.applicationDirectory.resolvePath("config/inout.xml");
				function onConfigLoaded(e:Event):void
				{
					config = XML(configFile.data.readUTFBytes(configFile.data.length));
					for(var i:int=0;i<config.server.length();++i)
					{
						var rBtn:RadioButton = new RadioButton();
						rBtn.label = config.server[i].@name;
						if(so.data["name"] == rBtn.label) 
						{
							rBtn.selected = true;
							platform_url = config.server.(@name == rBtn.label)[0].@url;
							StructStruct.packageName = config.server.(@name == rBtn.label)[0].@packageName;
							MsgStruct.packageName = config.server.(@name == rBtn.label)[0].@packageName;
							MsgStruct.extendsName = config.server.(@name == rBtn.label)[0].@extendsName;
							outputDir = config.server.(@name == rBtn.label)[0].@output;
							msgMngPath = config.server.(@name == rBtn.label)[0].@msgManagerPath;
						}
						else if(so.data["name"] == null) 
						{
							so.data["name"] = rBtn.label;
							platform_url = config.server.(@name == rBtn.label)[0].@url;
							StructStruct.packageName = config.server.(@name == rBtn.label)[0].@packageName;
							MsgStruct.packageName = config.server.(@name == rBtn.label)[0].@packageName;
							MsgStruct.extendsName = config.server.(@name == rBtn.label)[0].@extendsName;
							outputDir = config.server.(@name == rBtn.label)[0].@output;
							msgMngPath = config.server.(@name == rBtn.label)[0].@msgManagerPath;
							rBtn.selected = true;
						}
						rBtn.x = 40 + i * rBtn.label.length * 10;
						rBtn.y = 30;
						rBtn.addEventListener(MouseEvent.CLICK,function onClick(e:Event):void
						{
							platform_url = config.server.(@name == e.target.label)[0].@url;
							StructStruct.packageName = config.server.(@name == e.target.label)[0].@packageName;
							MsgStruct.packageName = config.server.(@name == e.target.label)[0].@packageName;
							MsgStruct.extendsName = config.server.(@name == e.target.label)[0].@extendsName;
							outputDir = config.server.(@name == e.target.label)[0].@output;
							msgMngPath = config.server.(@name == e.target.label)[0].@msgManagerPath;
							so.data["name"] = rBtn.label;
						});
						addElement(rBtn);
					}
				};
				configFile.addEventListener(Event.COMPLETE,onConfigLoaded);
				configFile.load();
			}
			
			private function loadStructTemplate():void
			{
				structTemplateFile = File.applicationDirectory.resolvePath("templates/StructTemplate.txt");
				function onComplete(e:Event):void
				{
					structTemplate = structTemplateFile.data.readUTFBytes(structTemplateFile.data.length);
//					serverType = "LOGIN";
				};
				structTemplateFile.addEventListener(Event.COMPLETE,onComplete);
				structTemplateFile.load();
			}
			
			private function loadMsgTemplate():void
			{
				msgTemplateFile = File.applicationDirectory.resolvePath("templates/MsgTemplate.txt");
				function onComplete(e:Event):void
				{
					msgTemplate = msgTemplateFile.data.readUTFBytes(msgTemplateFile.data.length);
				};
				msgTemplateFile.addEventListener(Event.COMPLETE,onComplete);
				msgTemplateFile.load();
			}
			
			private function getXML():void
			{
				var urlLoader:URLLoader = new URLLoader();
				urlLoader.addEventListener(Event.COMPLETE,onXMLLoaded);
				
				urlLoader.load(new URLRequest(platform_url));
			}
			
			private function onXMLLoaded(e:Event):void
			{
				var proto:XML = XML(e.target.data);
				var structList:XMLList = proto.struct_list[0].struct;
				var structRaw:XML;
				if(msgMngPath) 
				{
					msgManagerFile = new File(msgMngPath);
					msgManagerFs = new FileStream();
					msgManagerFs.open(msgManagerFile,FileMode.READ);
					var msgManagerContent:String = msgManagerFs.readUTFBytes(msgManagerFs.bytesAvailable);
					msgManagerFs.close();
					var reg:RegExp = /registerMessage\(\):void+\s+\{(\s+|[a-z]+|[A+Z]+)\}/;
					msgManagerContent = msgManagerContent.replace(reg,"registerMessage():void\n\t\t{\n\t\t\t{register}\n\t\t}");
				}
				for(var i:int =0;i<structList.length();++i)
				{
					structRaw = structList[i];
					var sName:String = structRaw.@name;
					if(verifyName(sName)) continue;
					StructTemplate.serverType = serverType;
					var classStruct:StructStruct = new StructStruct(structRaw);
					classStruct.template = structTemplate;
					var file:File = new File(outputDir+classStruct.name+".as");
					var fs:FileStream = new FileStream();
					fs.open(file,FileMode.WRITE);
					fs.writeUTFBytes(classStruct.getDefinitioin());
					fs.close();
				}
				var protoList:XMLList = proto.protocol_list[0].protocol;
				var msg:XML;
				for(i=0;i<protoList.length();++i)
				{
					msg = protoList[i];
					var rawInput:XML = structList.(@name == msg.@struct_in)[0];
					var rawOutput:XML = structList.(@name == msg.@struct_out)[0];
					
					var msgStruct:MsgStruct = new MsgStruct(msg,rawInput,rawOutput);
					
					msgStruct.template = msgTemplate;
					file = new File(outputDir+msgStruct.reqName+".as");
					fs = new FileStream();
					fs.open(file,FileMode.WRITE);
					fs.writeUTFBytes(msgStruct.getMsgRequest());
					fs.close();
					
					msgStruct.template = msgTemplate;
					file = new File(outputDir+msgStruct.resName+".as");
					fs = new FileStream();
					fs.open(file,FileMode.WRITE);
					fs.writeUTFBytes(msgStruct.getMsgRespond());
					fs.close();
					
					if(msgMngPath&&i+1<protoList.length())
					{
						msgManagerContent =	msgManagerContent.replace("{register}","regMsg("+msgStruct.msgID+","+msgStruct.resName+");\n\t\t\t{register}");
					}
					else
					{
						msgManagerContent = msgManagerContent.replace("{register}","regMsg("+msgStruct.msgID+","+msgStruct.resName+");");
						msgManagerFs.open(msgManagerFile,FileMode.WRITE);
						msgManagerFs.writeUTFBytes(msgManagerContent);
						msgManagerFs.close();
					}
				}
				Alert.show("Done!","Ok",4,null,function ():void {exit()});
			}
			
			private function verifyName(name:String):Boolean
			{
				if(name.slice(0,3) == "cli" ) return true;
				if(name.slice(0,2) == "db" ) return true;
				return false;
			}
		]]>
	</fx:Script>
	<s:Button x="256" y="93" label="Do" click="getXML()"/>
</s:WindowedApplication>
