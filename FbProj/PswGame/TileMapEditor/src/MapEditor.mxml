<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="629" height="390" initialize="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.bit101.components.Window;
			
			import components.ItemDisplay;
			import components.MapDisplay;
			import components.WinItemBox;
			import components.WinNewMap;
			
			import shinater.swing.Menu;
			import shinater.swing.MenuBar;
			import shinater.swing.MenuItem;
			
			private var mMenuBar:MenuBar;
			private var mMapLayer:Sprite;
			private var mUiLayer:Sprite;
			
			private var mNewMapWin:WinNewMap;
			private var mMapDisplay:MapDisplay;
			private var isSpacePressed:Boolean;
			
			private var mNPCBox:WinItemBox;
			private var mBuildingBox:WinItemBox;
			private var mItemBox:WinItemBox;
			private var mTeleportBox:WinItemBox;
			
			private function init():void
			{
				stage?onAddToStage(null):addEventListener(Event.ADDED_TO_STAGE,onAddToStage);
				var configLoader:URLLoader = new URLLoader();
				configLoader.addEventListener(Event.COMPLETE,onConfigComplete);
				configLoader.load(new URLRequest("config/project.xml"))
			}
			
			private function onAddToStage(e:Event):void
			{
				removeEventListener(Event.ADDED_TO_STAGE,onAddToStage);
				stage.addEventListener(Event.RESIZE,onStageResize);
				maximize();
				mUiLayer = new Sprite();
				mMenuBar = new MenuBar();
				mUiLayer.addChild(mMenuBar);
				var fileMenu:Menu = new Menu("&文件");
				var newItem:MenuItem = new MenuItem("&新建");
				var opnItem:MenuItem = new MenuItem("&打开");
				var savItem:MenuItem = new MenuItem("&保存");
				var extItem:MenuItem = new MenuItem("&退出");
				fileMenu.addMenuItem(newItem);
				fileMenu.addMenuItem(opnItem);
				fileMenu.addMenuItem(savItem);
				fileMenu.addMenuItem(extItem);
				mMenuBar.addMenu(fileMenu);
				
				var viewMenu:Menu = new Menu("&视图");
				mMenuBar.addMenu(viewMenu);
				var itemBox:MenuItem = new MenuItem("&物品");
				var teleBox:MenuItem = new MenuItem("&传送点");
				var npcBox:MenuItem = new MenuItem("&NPC");
				var buildingBox:MenuItem = new MenuItem("&建筑");
				viewMenu.addMenuItem(npcBox);
				viewMenu.addMenuItem(buildingBox);
				viewMenu.addMenuItem(itemBox);
				viewMenu.addMenuItem(teleBox);
				
				newItem.addEventListener(MouseEvent.MOUSE_UP,onNew);
				
				npcBox.addEventListener(MouseEvent.CLICK,oViewnNpc);
				itemBox.addEventListener(MouseEvent.CLICK,onViewItem);
				teleBox.addEventListener(MouseEvent.CLICK,onViewTeleport);
				buildingBox.addEventListener(MouseEvent.CLICK,onViewBuiding);
				
				stage.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);
				stage.addEventListener(KeyboardEvent.KEY_UP,onKeyUp);
				
				mMapDisplay = new MapDisplay();
				
				mMapDisplay.addEventListener(MouseEvent.MOUSE_DOWN,onMapDisplayPress);
				mMapDisplay.addEventListener(MouseEvent.MOUSE_UP,onMapDisplayRelease);
				
				stage.addChild(mMapDisplay);
				stage.addChild(mUiLayer);
			}
			
			private function onConfigComplete(e:Event):void
			{
				var target:URLLoader = e.target as URLLoader;
				target.removeEventListener(Event.COMPLETE,onConfigComplete);
				var config:XML = XML(target.data);
				var read:XML = config.read[0];
				MapDisplay.mapDir = read.@mapDir;
				ItemDisplay.iconDir = read.@iconDir;
			}
			
			private function onNew(e:MouseEvent):void
			{
				mNewMapWin ||= new WinNewMap(mUiLayer);
				mNewMapWin.addEventListener("ok",onWinNewMapOk);
				mNewMapWin.show();
			}
			
			private function onWinNewMapOk(e:Event):void
			{
				mNewMapWin.removeEventListener("ok",onWinNewMapOk);
				mNewMapWin.hide();
				var name:String = mNewMapWin.inputContent;
				mMapDisplay.load(name);
			}
			
			private function oViewnNpc(e:MouseEvent):void
			{
				mNPCBox ||= new WinItemBox(mUiLayer,"NPC");
				mNPCBox.setPosition(stage.stageWidth - 280,30);
				mNPCBox.toogle();
				var item:ItemDisplay = new ItemDisplay("npc");
				mNPCBox.pushItem(item);
			}
			private function onViewBuiding(e:MouseEvent):void
			{
				mBuildingBox ||= new WinItemBox(mUiLayer,"Building");
				mBuildingBox.setPosition(stage.stageWidth - 280,230);
				mBuildingBox.toogle();
			}
			private function onViewItem(e:MouseEvent):void
			{
				mItemBox ||= new WinItemBox(mUiLayer,"Item");
				mItemBox.setPosition(stage.stageWidth - 280,430);
				mItemBox.toogle();
			}
			private function onViewTeleport(e:MouseEvent):void
			{
				mTeleportBox ||= new WinItemBox(mUiLayer,"Teleport");
				mTeleportBox.setPosition(stage.stageWidth - 280,630);
				mTeleportBox.toogle();
			}
			private function onKeyDown(e:KeyboardEvent):void
			{
				switch(e.keyCode)
				{
					case Keyboard.SPACE:
						Mouse.cursor = MouseCursor.HAND;
						Mouse.show();//为了让鼠标上一行代码立即有效，需要调用show()一次
						isSpacePressed = true;
						break;
				}
			}
			
			private function onKeyUp(e:KeyboardEvent):void
			{
				switch(e.keyCode)
				{
					case Keyboard.SPACE:
						Mouse.cursor = MouseCursor.AUTO;
						Mouse.show();//为了让鼠标上一行代码立即有效，需要调用show()一次
						isSpacePressed = false;
						break;
				}
			}
			
			private function onMapDisplayPress(e:MouseEvent):void
			{
				if(isSpacePressed)
				{
					mMapDisplay.startDrag(false,new Rectangle(0,0,-mMapDisplay.width+stage.stageWidth,-mMapDisplay.height+stage.stageHeight));
				}
			}
			private function onMapDisplayRelease(e:MouseEvent):void
			{
				mMapDisplay.stopDrag();
			}
			
			private function onStageResize(e:Event):void
			{
				mMenuBar.width = stage.stageWidth;
			}
		]]>
	</fx:Script>
</s:WindowedApplication>
