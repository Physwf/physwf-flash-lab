<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="629" height="390" initialize="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.physwf.components.view.Animation;
			
			import components.MainMenu;
			import components.WinItemBox;
			import components.WinNewMap;
			
			import display.MapDisplay;
			import display.NPCDisplay;
			import display.ObjectDisplay;
			import display.TeleportDisplay;
			
			import shinater.swing.Menu;
			import shinater.swing.MenuBar;
			import shinater.swing.MenuItem;
			
			public static var editor:MapEditor;
			
			private var mMainMenu:MainMenu;
			
			private var mMapLayer:Sprite;
			private var mUiLayer:Sprite;
			public function get uiLayer():Sprite { return mUiLayer; }
			
			private var mMapDisplay:MapDisplay;
			public function get map():MapDisplay { return mMapDisplay; }
			private var isSpacePressed:Boolean;
			
			public var dragItem:Animation;
			
			private function init():void
			{
				stage?onAddToStage(null):addEventListener(Event.ADDED_TO_STAGE,onAddToStage);
				editor = this;
			}
			
			private function onAddToStage(e:Event):void
			{
				removeEventListener(Event.ADDED_TO_STAGE,onAddToStage);
				stage.addEventListener(Event.RESIZE,onStageResize);
				maximize();
				mUiLayer = new Sprite();
				
				mMainMenu = new MainMenu(stage);
				
				stage.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);
				stage.addEventListener(KeyboardEvent.KEY_UP,onKeyUp);
				
				mMapDisplay = new MapDisplay();
				
				mMapDisplay.addEventListener(MouseEvent.MOUSE_DOWN,onMapDisplayPress);
				mMapDisplay.addEventListener(MouseEvent.MOUSE_UP,onMapDisplayRelease);
				
				stage.addChild(mMapDisplay);
				stage.addChild(mUiLayer);
				
				addEventListener(Event.ENTER_FRAME,onEnterFrame);
				
				var configLoader:URLLoader = new URLLoader();
				configLoader.addEventListener(Event.COMPLETE,onConfigComplete);
				configLoader.load(new URLRequest("config/project.xml"))
			}
			
			private function onConfigComplete(e:Event):void
			{
				var target:URLLoader = e.target as URLLoader;
				target.removeEventListener(Event.COMPLETE,onConfigComplete);
				var config:XML = XML(target.data);
				var read:XML = config.read[0];
				var write:XML = config.write[0];
				
				MapDisplay.mapDir = (read.map[0]).@dir;
				MapDisplay.xmlDir = write.xml[0].@dir;
				MapDisplay.piecesDir = write.piece[0].@dir;
					
				TeleportDisplay.IconDir = read.@iconDir+read.teleport[0].@icon;
				TeleportDisplay.SceneDir = read.teleport[0].@dir;
				
				NPCDisplay.IconDir =  read.@iconDir+read.npc[0].@icon;
				NPCDisplay.SceneDir = read.npc[0].@dir;
				
				getTeleportList();
			}
			
			private function getTeleportList():void
			{
				var file:File = new File(TeleportDisplay.IconDir);
				var list:Array = file.getDirectoryListing();
				for each(file in list)
				{
					var item:TeleportDisplay = new TeleportDisplay(file.name);
					item.load();
					mMainMenu.teleportBox.pushItem(item);
				}
			}
			
			public function generate(option:String="jpg"):void
			{
				mMapDisplay.toPieces(option);
				mMapDisplay.toXML();
			}
			
			private function onKeyDown(e:KeyboardEvent):void
			{
				switch(e.keyCode)
				{
					case Keyboard.SPACE:
						Mouse.cursor = MouseCursor.HAND;
						Mouse.show();//为了让鼠标上一行代码立即有效，需要调用show()一次
						isSpacePressed = true;
						break;
				}
			}
			
			private function onKeyUp(e:KeyboardEvent):void
			{
				switch(e.keyCode)
				{
					case Keyboard.SPACE:
						Mouse.cursor = MouseCursor.AUTO;
						Mouse.show();//为了让鼠标上一行代码立即有效，需要调用show()一次
						isSpacePressed = false;
						break;
				}
			}
			
			private function onMapDisplayPress(e:MouseEvent):void
			{
				if(isSpacePressed)
				{
					mMapDisplay.startDrag(false,new Rectangle(0,0,-mMapDisplay.width+stage.stageWidth,-mMapDisplay.height+stage.stageHeight));
				}
			}
			private function onMapDisplayRelease(e:MouseEvent):void
			{
				mMapDisplay.stopDrag();
			}
			
			private function onStageResize(e:Event):void
			{
				mMainMenu.onStageResize();
			}
			
			private function onEnterFrame(e:Event):void
			{
				if(dragItem)
				{
					dragItem.x = mMapDisplay.mouseX;
					dragItem.y = mMapDisplay.mouseY;
				}
				for each(var ani:Animation in ObjectDisplay.animations)
				{
					ani.update();
				}
			}
		]]>
	</fx:Script>
</s:WindowedApplication>
